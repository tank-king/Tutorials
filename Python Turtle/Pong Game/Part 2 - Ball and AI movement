import turtle
import random
import time

screen_width = 800
screen_height = 350

screen = turtle.Screen()
screen.title('Pong Game')
screen.setup(screen_width, screen_height)
screen.bgcolor('#000011')
screen.tracer(0)

bat1 = turtle.Turtle()
bat1.shape('square')
bat1.shapesize(7, 1, 1)
bat1.color('#00DDFF')
bat1.penup()

bat2 = turtle.Turtle()
bat2.shape('square')
bat2.shapesize(7, 1, 1)
bat2.color('#00DDFF')
bat2.penup()

bat1.setpos(-screen_width // 2 + 20, 0)
bat2.setpos(screen_width // 2 - 25, 0)

ball = turtle.Turtle()
ball.penup()
ball.shape('circle')
ball.shapesize(1.7, 1.7, 1)
ball.color('white')
ball.setheading(random.randint(120, 240))

pen = turtle.Turtle()
pen.hideturtle()
pen.penup()
pen.pencolor('#777777')


def go_up():
    bat1.sety(bat1.ycor() + 10)
    if bat1.ycor() > screen_height // 2 - 70:
        bat1.sety(bat1.ycor() - 10)


def go_down():
    bat1.sety(bat1.ycor() - 10)
    if bat1.ycor() < -screen_height // 2 + 70:
        bat1.sety(bat1.ycor() + 10)


def go_up2():
    bat2.sety(bat2.ycor() + 10)
    if bat2.ycor() > screen_height // 2 - 70:
        bat2.sety(bat2.ycor() - 10)


def go_down2():
    bat2.sety(bat2.ycor() - 10)
    if bat2.ycor() < -screen_height // 2 + 70:
        bat2.sety(bat2.ycor() + 10)


screen.onkeypress(go_up, 'Up')
screen.onkeypress(go_down, 'Down')
screen.onkeyrelease(go_up, 'Up')
screen.onkeyrelease(go_down, 'Down')
screen.onkeypress(go_up2, 'w')
screen.onkeypress(go_down2, 's')
screen.onkeyrelease(go_up2, 'w')
screen.onkeyrelease(go_down2, 's')
screen.listen()


def move_ball():
    ball.forward(10)
    # code to make sure that the ball is re-launched from it's starting position
    # if it goes off-screen
    if abs(ball.xcor()) >= screen_width // 2 + 50:
        ball.setpos(0, 0)
        # ball.setheading(random.randint(120, 240))

    # now checking for collision with the upper and lower walls
    if abs(ball.ycor()) >= screen_height // 2 - 25:
        ball.setheading(360 - ball.heading() % 360)

    # bats and ball collision checking
    if ball.xcor() <= -screen_width // 2 + 50:
        if bat1.ycor() - 80 <= ball.ycor() <= bat1.ycor() + 80:
            ball.setx(-screen_width // 2 + 50)
            ball.setheading(180 - ball.heading() % 360)
    if ball.xcor() >= screen_width // 2 - 50:
        if bat2.ycor() - 80 <= ball.ycor() <= bat2.ycor() + 80:
            ball.setx(screen_width // 2 - 50)
            ball.setheading(180 - ball.heading() % 360)


def calculate_ball_trajectory():
    initial_ball_pos = ball.pos()
    initial_ball_angle = ball.heading()
    ball.pendown()
    ball.pensize(5)
    ball.pencolor('orange')
    ball.clear()
    ball.setheading(ball.heading() % 360)
    if ball.heading() < 90 or ball.heading() > 270:
        while ball.xcor() < screen_width // 2 - 75:
            move_ball()
    ball.penup()
    x, y = ball.pos()
    ball.setpos(initial_ball_pos)
    ball.setheading(initial_ball_angle)
    return x, y


def ai_movement():
    offset = 10
    if ball.heading() < 90 or ball.heading() > 270:
        target_y = calculate_ball_trajectory()[1]
        if target_y > bat2.ycor() + offset:
            go_up2()
            # bat2.sety(bat2.ycor() + 5)
        elif target_y < bat2.ycor() - offset:
            go_down2()
            # bat2.sety(bat2.ycor() - 5)


while True:
    pen.clear()
    pen.pensize(10)
    pen.pencolor('#777777')
    pen.goto(0, -screen_height // 2)
    pen.pendown()
    pen.goto(0, screen_height // 2)
    pen.penup()
    move_ball()
    # calculate_ball_trajectory()
    ai_movement()
    screen.update()
    time.sleep(0.01)
